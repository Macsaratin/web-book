import { Injectable } from '@angular/core';
import axios from 'axios';

@Injectable({
  providedIn: 'root'
})
export class BannerService {
  private apiUrl = 'http://localhost:8080/api';

  //  T·∫°o m·ªõi banner (g·ª≠i ·∫£nh v√† t√™n)
  async createBanner(bannerName: string, imageFile: File) {
    try {
      const token = localStorage.getItem('jwt-token');
      if (!token) throw new Error("Kh√¥ng t√¨m th·∫•y token!");

      const formData = new FormData();
      formData.append('bannerName', bannerName);
      formData.append('image', imageFile);

      const response = await axios.post(`${this.apiUrl}/admin/banner`, formData, {
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'multipart/form-data'
        }
      });

      console.log('Banner ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng:', response.data);
      return response.data;
    } catch (error: any) {
      console.error('L·ªói khi t·∫°o banner:', error.response?.data || error.message);
      throw error;
    }
  }

  // L·∫•y banner theo ID
  async getBannerById(id: number) {
    try {
      const token = localStorage.getItem('jwt-token'); 
      if (!token) throw new Error("Kh√¥ng t√¨m th·∫•y token!");

      const response = await axios.get(`${this.apiUrl}/admin/banner/${id}`, {
        headers: {
          'Authorization': `Bearer ${token}`,
          'Accept': 'application/json'
        }
      });

      return response.data;
    } catch (error) {
      console.error("L·ªói khi l·∫•y banner theo ID:", error);
      throw error;
    }
  }

  async getAllBanner() {
    try {
      const token = localStorage.getItem('jwt-token'); 
      if (!token) throw new Error("Kh√¥ng t√¨m th·∫•y token!");

      const response = await axios.get(`${this.apiUrl}/admin/banner`, {
        headers: {
          'Authorization': `Bearer ${token}`,
        }
      });

      console.log("Danh s√°ch banner:", response.data);
      return response.data;
    } catch (error) {
      console.error("L·ªói khi l·∫•y danh s√°ch banner:", error);
      return [];
    }
  }

  async updateBanner(id: number, bannerName: string, imageFile?: File | null) {
    const token = localStorage.getItem('jwt-token'); 
    if (!token) throw new Error("Kh√¥ng t√¨m th·∫•y token!");
    if (!imageFile) {
      return axios.put(`${this.apiUrl}/admin/banner/${id}`, { bannerName });
    }
    const formData = new FormData();
    formData.append('bannerName', bannerName);
    formData.append('image', imageFile);
  
    return axios.put(`${this.apiUrl}/admin/banner/${id}`, formData, {
      headers: {
        'Authorization': `Bearer ${token}`,
        'Content-Type': 'multipart/form-data',
      },
    });
  }
  
  // üü¢ X√≥a banner theo ID
  async deleteBanner(id: number) {
    try {
      const token = localStorage.getItem('jwt-token');
      if (!token) throw new Error("Kh√¥ng t√¨m th·∫•y token!");

      await axios.delete(`${this.apiUrl}/admin/banner/${id}`, {
        headers: {
          'Authorization': `Bearer ${token}`
        }
      });

      console.log(`Banner ID ${id} ƒë√£ b·ªã x√≥a`);
    } catch (error) {
      console.error("L·ªói khi x√≥a banner:", error);
      throw error;
    }
  }


  async updateBannerStatus(id: number, status: number) {
    try {
        const token = localStorage.getItem('jwt-token'); 
        if (!token) throw new Error("Kh√¥ng t√¨m th·∫•y token!");

        const response = await axios.put(`${this.apiUrl}/admin/update-status`, 
        { id, status }, 
        {
            headers: {
                'Authorization': `Bearer ${token}`, // Fix l·ªói c√∫ ph√°p ·ªü ƒë√¢y
                'Content-Type': 'application/json'
            }
        });

        return response.data;
    } catch (error) {
        console.error("L·ªói khi c·∫≠p nh·∫≠t tr·∫°ng th√°i banner:", error);
        throw error;
    }
}

  // üü¢ L·∫•y ·∫£nh banner
  async getBannerImage(fileName: string) {
    try {
      const token = localStorage.getItem('jwt-token');
      if (!token) throw new Error("Kh√¥ng t√¨m th·∫•y token!");

      const response = await fetch(`${this.apiUrl}/public/images/banners/${fileName}`, {
        headers: {
          'Authorization': `Bearer ${token}`,
        }
      });

      if (!response.ok) throw new Error("L·ªói khi t·∫£i h√¨nh ·∫£nh!");

      return URL.createObjectURL(await response.blob());
    } catch (error) {
      console.error("L·ªói khi l·∫•y h√¨nh ·∫£nh:", error);
      return 'assets/default-image.png';
    }
  }


  // gettrash
async moveToTrash(id: number) {
  try {
      const token = localStorage.getItem('jwt-token');
      if (!token) throw new Error("Kh√¥ng t√¨m th·∫•y token!");

      await axios.put(`${this.apiUrl}/admin/update-status`, 
      { id, status: 2 }, // ƒê·∫∑t tr·∫°ng th√°i th√†nh 2 (ƒê√£ x√≥a)
      {
          headers: {
              'Authorization': `Bearer ${token}`,
              'Content-Type': 'application/json'
          }
      });

      console.log(`Banner ID ${id} ƒë√£ ƒë∆∞·ª£c chuy·ªÉn v√†o th√πng r√°c`);
  } catch (error) {
      console.error("L·ªói khi chuy·ªÉn banner v√†o th√πng r√°c:", error);
      throw error;
  }
}

}
